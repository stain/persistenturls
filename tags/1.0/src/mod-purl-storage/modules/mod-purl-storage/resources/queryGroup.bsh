import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnly;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;

import java.util.*;

main() {
    resp = null;
    iur = null;
    group = null;
    
    try {
        ruri = context.getThisRequest().getArgument("uri");
        group = ruri.substring(13);
        
        groupSQL = context.sourceAspect("ffcpl:/sql/db/groupQuery.xml", IAspectXDA.class);
        groupSQL = generateGroupQuerySQL(groupSQL, group);
        results = issueSQLQuery(groupSQL);

        if(results.getXDA().isTrue("/results/row/z_id")) {
        groupID = results.getXDA().getText("/results/row/z_id/text()", true);

        groupMaintainersSQL = context.sourceAspect("ffcpl:/sql/db/groupMaintainersQuery.xml", IAspectXDA.class);
        groupMaintainersResults = issueSQLQuery(processSQL(groupMaintainersSQL, groupID));
        groupMembersSQL = context.sourceAspect("ffcpl:/sql/db/groupMembersQuery.xml", IAspectXDA.class);
        groupMembersResults = issueSQLQuery(processSQL(groupMembersSQL, groupID));        
        
        groupTemplate = context.sourceAspect("ffcpl:/resources/groupTemplate.xml", IAspectXDA.class);     
        resultsXDA = results.getXDA();
        groupXDA = groupTemplate.getClonedXDA();
        groupXDA.setText("/group/@status", resultsXDA.getText("/results/row/status/text()", true));

        groupXDA.setText("/group/z_id", resultsXDA.getText("/results/row/z_id/text()", true));                
        groupXDA.setText("/group/id", resultsXDA.getText("/results/row/g_id/text()", true));
        groupXDA.setText("/group/name", resultsXDA.getText("/results/row/name/text()", true));

        if(resultsXDA.isTrue("/results/row/comments/text()")) {
            groupXDA.setText("/group/comments", resultsXDA.getText("/results/row/comments/text()", true));
        }
        
        itor = groupMaintainersResults.getXDA().readOnlyIterator("/results/row");
        addGroupMaintainersAndMembers(groupXDA, itor, "maintainers");
        itor = groupMembersResults.getXDA().readOnlyIterator("/results/row");
        addGroupMaintainersAndMembers(groupXDA, itor, "members");        
        
        iur = new DOMXDAAspect(groupXDA);
        } else {
            iur = new StringAspect("<group/>");
        }

    } catch(Throwable t) {
        t.printStackTrace();
        iur = new StringAspect("<error message=\"Could not query group:" + group + "\"/>");
    }

    req=context.createSubRequest("active:attachGoldenThread");
    req.addArgument("operand", iur);
    req.addArgument("param", "gt:resource:" + group);
    res=context.issueSubRequest(req);
        
    resp = context.createResponseFrom(res);
    resp.setMimeType("text/xml");
    resp.setCacheable();
    context.setResponse(resp);
}

generateGroupQuerySQL(groupSQL, group) {
    // Sed the Group name
    // TODO: Turn this into a cacheable resource request
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@GID@@</regex><replace>");
    sedSB.append(group);
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", groupSQL);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);
}

issueSQLQuery(sql) {
    // Issue the query and return the results as IAspectXDA
    req = context.createSubRequest("active:sqlQuery");
    req.addArgument("operand", sql);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);
}

processSQL(groupMaintainersSQL, groupID) {
    // Sed the database and table names
    // TODO: Turn these into cacheable resource requests
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@GID@@</regex><replace>");
    sedSB.append(groupID);
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", groupMaintainersSQL);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);      
}

addGroupMaintainersAndMembers(xda, itor, element) {
    while(itor.hasNext()) {
        itor.next();
        sb = new StringBuffer();
            
        switch(itor.getText("type", true)) {
            case "0":
                sb.append("<uid>");
                sb.append(getMaintainerFromID("userid", "users", itor.getText("m_id", true)));
                sb.append("</uid>");
            break;
            case "1":
                sb.append("<gid>");
                sb.append(getMaintainerFromID("g_id", "groups", itor.getText("m_id", true)));              
                sb.append("</gid>");                
            break;
        }
        
        node = context.transrept(new StringAspect(sb.toString()), IAspectXDA.class);
        xda.append(node.getXDA(), "/", "/group/" + element);
    }
}

getMaintainerFromID(maintainerLabel, maintainerTable, zID) {

    maintainerFromIDSQL = context.source("ffcpl:/sql/db/queryMaintainerFromID.xml");
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@ZID@@</regex><replace>");
    sedSB.append(zID);
    sedSB.append("</replace></pattern><pattern><regex>@@TABLE_NAME@@</regex><replace>");
    sedSB.append(maintainerTable);
    sedSB.append("</replace></pattern><pattern><regex>@@MAINTAINER_LABEL@@</regex><replace>");
    sedSB.append(maintainerLabel);  
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", maintainerFromIDSQL);
    req.setAspectClass(IAspectXDA.class);
    maintainerFromIDSQL = context.issueSubRequestForAspect(req);
    
    results = issueSQLQuery(maintainerFromIDSQL);

    maintainer = results.getXDA().getText("/results/row/" + maintainerLabel, true);
}