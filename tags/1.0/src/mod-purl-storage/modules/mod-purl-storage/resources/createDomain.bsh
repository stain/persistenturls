import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnly;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;

import java.util.*;

main() {
	resp = null;
	iur = null;
	domain = null;
	
	try {
		param = context.sourceAspect("this:param:param", IAspectXDA.class);
		paramXDA = param.getXDA();
		
		domain = paramXDA.getText("/domain/id", true);
		
		maintainerUserMap = new HashMap();
        maintainerUserItor = paramXDA.readOnlyIterator("//maintainers/uid");
        
        while(maintainerUserItor.hasNext()) {
            maintainerUserItor.next();
            maintainer = maintainerUserItor.getText(".", true);
            z_id = maintainerUserMap.get(maintainer);
            
            if(z_id == null) {
                req = context.createSubRequest("active:purl-storage-query-user");
                req.addArgument("uri", "ffcpl:/user/" + maintainer);
                req.setAspectClass(IAspectXDA.class);
                maintainerXDA = (IAspectXDA)context.issueSubRequestForAspect(req);
                z_id = maintainerXDA.getXDA().getText("/user/z_id", true);
                maintainerUserMap.put(maintainer, z_id);
            }
        }
        
		maintainerGroupMap = new HashMap();
        maintainerGroupItor = paramXDA.readOnlyIterator("//maintainers/gid");
        
        while(maintainerGroupItor.hasNext()) {
            maintainerGroupItor.next();
            maintainer = maintainerGroupItor.getText(".", true);
            z_id = maintainerGroupMap.get(maintainer);
            
            if(z_id == null) {
                req = context.createSubRequest("active:purl-storage-query-group");
                req.addArgument("uri", "ffcpl:/group/" + maintainer);
                req.setAspectClass(IAspectXDA.class);
                maintainerXDA = (IAspectXDA)context.issueSubRequestForAspect(req);
                z_id = maintainerXDA.getXDA().getText("/group/z_id", true);
                maintainerGroupMap.put(maintainer, z_id);
            }
        }
        
        maintainerUserItor = paramXDA.readOnlyIterator("//writers/uid");
        
        while(maintainerUserItor.hasNext()) {
            maintainerUserItor.next();
            maintainer = maintainerUserItor.getText(".", true);
            z_id = maintainerUserMap.get(maintainer);
            
            if(z_id == null) {
                req = context.createSubRequest("active:purl-storage-query-user");
                req.addArgument("uri", "ffcpl:/user/" + maintainer);
                req.setAspectClass(IAspectXDA.class);
                maintainerXDA = (IAspectXDA)context.issueSubRequestForAspect(req);
                z_id = maintainerXDA.getXDA().getText("/user/z_id", true);
                maintainerUserMap.put(maintainer, z_id);
            }
        }
        
        maintainerGroupItor = paramXDA.readOnlyIterator("//writers/gid");
        
        while(maintainerGroupItor.hasNext()) {
            maintainerGroupItor.next();
            maintainer = maintainerGroupItor.getText(".", true);
            z_id = maintainerGroupMap.get(maintainer);
            
            if(z_id == null) {
                req = context.createSubRequest("active:purl-storage-query-group");
                req.addArgument("uri", "ffcpl:/group/" + maintainer);
                req.setAspectClass(IAspectXDA.class);
                maintainerXDA = (IAspectXDA)context.issueSubRequestForAspect(req);
                z_id = maintainerXDA.getXDA().getText("/group/z_id", true);
                maintainerGroupMap.put(maintainer, z_id);
            }
        }        
                

        maintainerSB = new StringBuffer("<sed>");
                
        itor = maintainerUserMap.keySet().iterator();
        
        while(itor.hasNext()) {
            key = itor.next();
            maintainerSB.append("<pattern><regex>@@USER-");
            maintainerSB.append(key);
            maintainerSB.append("@@</regex><replace>");
            maintainerSB.append(maintainerUserMap.get(key));
            maintainerSB.append("</replace></pattern>");
        }
        
        itor = maintainerGroupMap.keySet().iterator();
        
        while(itor.hasNext()) {
            key = itor.next();
            maintainerSB.append("<pattern><regex>@@GROUP-");
            maintainerSB.append(key);
            maintainerSB.append("@@</regex><replace>");
            maintainerSB.append(maintainerGroupMap.get(key));
            maintainerSB.append("</replace></pattern>");
        }        
        
        maintainerSB.append("</sed>");
        
		req = context.createSubRequest("active:xslt");
		req.addArgument("operand", param);
		req.addArgument("operator", "ffcpl:/sql/db/createDomain.xsl");
		iur = context.issueSubRequest(req);
		
        req = context.createSubRequest();
        req.setURI("active:sed");
        req.addArgument("operator", new StringAspect(maintainerSB.toString()));
        req.addArgument("operand", iur);
        iur = context.issueSubRequest(req);
        
        req = context.createSubRequest("active:sqlBatch");
        req.addArgument("operand", iur);
        iur = context.issueSubRequest(req);
        
        req = context.createSubRequest("active:purl-storage-query-domain");
		// TODO: Refactor DomainResolver into a common module and leverage that
		req.addArgument("uri", "ffcpl:/domain" + domain);
		iur = context.issueSubRequest(req);
	} catch(Throwable t) {
		t.printStackTrace();
		iur = new StringAspect("<error message=\"Could not store domain:" + domain + "\"/>");
	}
	
	resp = context.createResponseFrom(iur);
	resp.setMimeType("text/xml");
	context.setResponse(resp);
}