import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnly;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;

import java.util.*;

main() {
	resp = null;
	iur = null;
	domain = null;
	
	try {
		ruri = context.getThisRequest().getArgument("uri");
		domain = ruri.substring(13);
		
		domainSQL = context.sourceAspect("ffcpl:/sql/db/domainQuery.xml", IAspectXDA.class);
		domainSQL = generateDomainQuerySQL(domainSQL, domain);
		results = issueSQLQuery(domainSQL);
		
		if(results.getXDA().isTrue("/results/row/z_id")) {
		domainID = results.getXDA().getText("/results/row/z_id/text()", true);

		sharedMaintainersSQL = context.sourceAspect("ffcpl:/sql/db/domainMaintainersQuery.xml", IAspectXDA.class);
		domainMaintainersResults = issueSQLQuery(processSharedSQL(sharedMaintainersSQL, "domainmaintainers", domainID));
		domainWritersResults = issueSQLQuery(processSharedSQL(sharedMaintainersSQL, "domainwriters", domainID));		
		
		domainTemplate = context.sourceAspect("ffcpl:/resources/domainTemplate.xml", IAspectXDA.class);		
		resultsXDA = results.getXDA();
		domainXDA = domainTemplate.getClonedXDA();
		domainXDA.setText("/domain/@status", resultsXDA.getText("/results/row/status/text()", true));
		domainXDA.setText("/domain/z_id", resultsXDA.getText("/results/row/z_id/text()", true));				
		domainXDA.setText("/domain/id", resultsXDA.getText("/results/row/d_id/text()", true));
		domainXDA.setText("/domain/name", resultsXDA.getText("/results/row/name/text()", true));
		domainXDA.setText("/domain/public", resultsXDA.getText("/results/row/public/text()", true));
		
		itor = domainMaintainersResults.getXDA().readOnlyIterator("/results/row");
		addDomainMaintainersAndWriters(domainXDA, "/domain/maintainers", "m_id", itor);
		
		itor = domainWritersResults.getXDA().readOnlyIterator("/results/row");
		addDomainMaintainersAndWriters(domainXDA, "/domain/writers", "w_id", itor);

		iur = new DOMXDAAspect(domainXDA);
		
		} else {
			iur = new StringAspect("<domain/>");
		}

	} catch(Throwable t) {
		t.printStackTrace();
		iur = new StringAspect("<error message=\"Could not query domain:" + domain + "\"/>");
	}

	req=context.createSubRequest("active:attachGoldenThread");
	req.addArgument("operand", iur);
	req.addArgument("param", "gt:resource:" + domain);
	res=context.issueSubRequest(req);
		
	resp = context.createResponseFrom(res);
	resp.setMimeType("text/xml");
	resp.setCacheable();
	//resp.setExpired();
	context.setResponse(resp);
}

generateDomainQuerySQL(domainSQL, domain) {
	// Sed the domain name
	// TODO: Turn this into a cacheable resource request
	
	sedSB = new StringBuffer("<sed><pattern><regex>@@DOMAIN@@</regex><replace>");
	sedSB.append(domain);
	sedSB.append("</replace></pattern></sed>");
	sed = new StringAspect(sedSB.toString());
	
	req = context.createSubRequest("active:sed");
	req.addArgument("operator", sed);
	req.addArgument("operand", domainSQL);
	req.setAspectClass(IAspectXDA.class);
	context.issueSubRequestForAspect(req);
}

issueSQLQuery(sql) {
	// Issue the query and return the results as IAspectXDA
	req = context.createSubRequest("active:sqlQuery");
	req.addArgument("operand", sql);
	req.setAspectClass(IAspectXDA.class);
	context.issueSubRequestForAspect(req);
}

processSharedSQL(sharedMaintainersSQL, maintainersTable, domainID) {
	// Sed the database and table names
	// TODO: Turn these into cacheable resource requests
	
	sedSB = new StringBuffer("<sed><pattern><regex>@@DID@@</regex><replace>");
	sedSB.append(domainID);
	sedSB.append("</replace></pattern><pattern><regex>@@TABLE_NAME@@</regex><replace>");
	sedSB.append(maintainersTable);
	sedSB.append("</replace></pattern></sed>");
	sed = new StringAspect(sedSB.toString());
	
	req = context.createSubRequest("active:sed");
	req.addArgument("operator", sed);
	req.addArgument("operand", sharedMaintainersSQL);
	req.setAspectClass(IAspectXDA.class);
	context.issueSubRequestForAspect(req);		
}

addDomainMaintainersAndWriters(xda, xpath, idlabel, itor) {
	while(itor.hasNext()) {
		itor.next();
		sb = new StringBuffer();
			
		switch(itor.getText("type", true)) {
			case "0":
				sb.append("<uid>");
				sb.append(getMaintainerFromID("userid", "users", itor.getText(idlabel, true)));
				sb.append("</uid>");
			break;
			case "1":
				sb.append("<gid>");
				sb.append(getMaintainerFromID("g_id", "groups", itor.getText(idlabel, true)));				
				sb.append("</gid>");				
			break;
		}
		
		node = context.transrept(new StringAspect(sb.toString()), IAspectXDA.class);
		xda.append(node.getXDA(), "/", xpath);
	}
}

getMaintainerFromID(maintainerLabel, maintainerTable, zID) {

	maintainerFromIDSQL = context.source("ffcpl:/sql/db/queryMaintainerFromID.xml");
	
	sedSB = new StringBuffer("<sed><pattern><regex>@@ZID@@</regex><replace>");
	sedSB.append(zID);
	sedSB.append("</replace></pattern><pattern><regex>@@TABLE_NAME@@</regex><replace>");
	sedSB.append(maintainerTable);
	sedSB.append("</replace></pattern><pattern><regex>@@MAINTAINER_LABEL@@</regex><replace>");
	sedSB.append(maintainerLabel);	
	sedSB.append("</replace></pattern></sed>");
	sed = new StringAspect(sedSB.toString());
	
	req = context.createSubRequest("active:sed");
	req.addArgument("operator", sed);
	req.addArgument("operand", maintainerFromIDSQL);
	req.setAspectClass(IAspectXDA.class);
	maintainerFromIDSQL = context.issueSubRequestForAspect(req);
	
	results = issueSQLQuery(maintainerFromIDSQL);

	maintainer = results.getXDA().getText("/results/row/" + maintainerLabel, true);
}
