<?xml version="1.0" encoding="UTF-8"?>

<document>
<title>sqlProc Accessor</title>
<!--***************Cascading Style Sheets***************-->
<csslist>
	<css>/xlib/styles/css_ten60_lnf.css</css>
	<css>/xlib/styles/xmlverbatim.css</css>
</csslist>
<!--***************Links***************-->
<links>
</links>
<!--***************Table of Contents***************-->
<toc>
	<section name="definition"/>
	<section name="purpose"/>
</toc>


<section name="definition" styleuri="/xusr/share/doc/styles_1060/style_definition.xsl">
	<content>
		<module>urn:org:ten60:netkernel:mod:db</module>
		<format>
		<sub name="format"/>
		</format>
		<syntax>
			<type><b>sqlProc</b></type>
			<operand req="true">the &lt;sql&gt; call statement</operand>
			<configuration>optional configuration document</configuration>
			<target req="true" frag="true">a result sets document</target>
		</syntax>
		<nkf>
			<sub name="nkf"/>
		</nkf>
		</content>
	<includes>

<include name="nkf" type="java"><java>
import org.ten60.netkernel.layer1.representation.StringAspect;
import org.ten60.netkernel.xml.representation.IAspectXDA;
main()
{	id=84744;
	location="avon";
	sql= "&lt;sql&gt;{call MyProc( "+id+",\""location"+"\") }&lt;/sql&gt;";
	req=context.createSubRequest("active:sqlProc");
	req.addArgument("operand", new StringAspect( query ));
	req.setAspectClass(IAspectXDA.class)
	xda = context.issueSubRequestForAspect(req).getXDA();
}
</java></include>
<include name="format" type="xml">
<instr>
	<type>sqlProc</type>
	<operand><sql>{ call MyProc( 84744, "avon" ) }</sql></operand>
	<configuration>/myconfiguration/configRDBMS.xml</configuration>
	<target>var:resultsetsDocument</target>
</instr>
</include>
</includes>
</section>

<section name="purpose" styleuri="/xusr/share/doc/styles_1060/style_basic.xsl">
	<content>
        <p>The <code>sqlProc</code> accessor executes a stored procedure on a database
		using a JDBC connection. The query is provided in the operand
		as a canonical <code>&lt;sql&gt;</code> document (see example above). 
		Parameters should be pre-substituted into the sql document.
		Several technologies such as <link name="doc_ura_stm">STM</link> and <link name="doc_ura_xslt">XSLT</link>
		are useful for this purpose.
		The result set is returned as unparsed XML of the form:
		<sub name="result"/>
		</p>
		<p>
		Like the underlying JDBC interface, sqlQuery cannot be used to update a document, use sqlUpdate or sqlBatch.
		</p>
		<h3>Configuration</h3>
		<p>
		By default the configuration will be read from <code>ffcpl:/etc/ConfigRDBMS.xml</code>.
		The document provides a driver and
		connection URI (see example below).  Alternatively,the configuration can be provided in
		an optional &lt;configuration&gt; argument - this
		may be either a URI to a config document or a literal configuration document.
		</p>
		<sub name="config"/>
		For more details on the configuration see the <link name="doc_books_cst_rdbms_introduction">Mod DB Guide</link>.
		
	</content>
	<includes>
		<include name="result" type="xml">
			<resultsets>
				<result>
					<row>
						<columnName1>value</columnName1>
						<columnName2>value</columnName2>
					</row>
				</result>
				<result>
					<row>
						<columnName1>value</columnName1>
						<columnName2>value</columnName2>
					</row>
				</result>
			</resultsets>
		</include>
<include name="config" type="xml">
<config>
  <rdbms>
    <jdbcDriver>com.mysql.jdbc.Driver</jdbcDriver>
    <jdbcConnection>
      jdbc:mysql://localhost/mydatabase?user=myusername&amp;password=mypassword
    </jdbcConnection>
  </rdbms>
</config>
</include>
</includes>
</section>

</document>