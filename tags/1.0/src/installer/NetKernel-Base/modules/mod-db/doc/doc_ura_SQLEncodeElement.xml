<?xml version="1.0" encoding="UTF-8"?>

<document>
<title>SQLEncodeElement/SQLDecodeElement Accessor</title>
<!--***************Cascading Style Sheets***************-->
<csslist>
	<css>/xlib/styles/css_ten60_lnf.css</css>
	<css>/xlib/styles/xmlverbatim.css</css>
</csslist>
<!--***************Links***************-->
<links>
</links>
<!--***************Table of Contents***************-->
<toc>
	<section name="title"/>
	<section name="definition"/>
	<section name="purpose"/>
	<section name="copyright"/>
</toc>

<section name="title" styleuri="/xusr/share/doc/styles_1060/style_title.xsl">
	<content>
		<name>SQLEncodeElement/SQLDecodeElement</name>
		<text>Accessor to Encode/Decode XML to/from a form suitable for storing in an RDBMS</text>
	</content>
</section>

<section name="definition" styleuri="/xusr/share/doc/styles_1060/style_definition.xsl">
	<content>
		<module>urn:org:ten60:netkernel:mod:db</module>
		<format>
		<sub name="format"/>
		</format>
		<returns>
<b>t</b>
		</returns>
		<syntax>
			<type><b>SQLEncodeElement/SQLDecodeElement</b></type>
			<operand req="true">the URI of the XML resources</operand>
			<target req="true" frag="true">target resource</target>
		</syntax>
		</content>
	<includes>

<include name="format" type="xml">
<instr>
	<type>SQLEncodeElement</type>
	<operand>var:source</operand>
	<operator><xpath>/path/to/element</xpath></operator>
	<target>var:encoded</target>
</instr>
</include>
</includes>
</section>

<section name="purpose" styleuri="/xusr/share/doc/styles_1060/style_basic.xsl">
	<content>
        <p>
		It is often useful to store an XML fragment in a relational database text field.
		</p>
		<p>The <code>SQLEncodeElement/SQLDecodeElement</code> accessor encode/decodes XML to/from a form suitable for
		storage in a text field of an RDBMS.
		</p>
		<p>
		Encoding/Decoding is applied to one or multiple elements by specifying the canonical XPath target in the operator.
		</p>
		<h3>SQLEncodeElement</h3>
		<p>
		<code>SQLEncodeElement</code> serializes an XML fragment located by the canonical XPATH specified in the operator.
		The element, it's text and all it's child nodes are serialized into escaped text.  The elements content becomes the serialized
		text.  All child elements are removed.   SQLEncodeElement serializes and collapses to escaped text an XML fragment.  The element's text
		is suitable for storing in a RDBMS text field.
		</p>
		<h4>Example</h4>
		<p>For a source document var:source</p>
		<sub name="source"/>
		<p>Element /root/a is encoded with...</p>
		<sub name="encode"/>
		<p>Producing the encoded document...</p>
		<sub name="encoded"/>
		<h3>SQLDecodeElement</h3>
		<p>
		<code>SQLDecodeElement</code> parses a text element and replaces a text element located by the canonical XPATH specified in the operator.
		The element's text is parsed to an XML fragment.  The fragment replaces the text element.  SQLDecodeElement inflates an escaped text XML fragment.
		</p>
		<h4>Example</h4>
		<p>The encoded document above is decoded with</p>
		<sub name="decode"/>
		<p>Producing the original</p>
		<sub name="source"/>
	</content>
<includes>

<include type="xml" name="source">
	<root>
		<a>
			<b>text</b>
		</a>
	</root>
</include>

<include type="xml" name="encode">
	<instr>
		<type>SQLEncodeElement</type>
		<operand>var:source</operand>
		<operator><xpath>/root/a</xpath></operator>
		<target>var:encoded</target>
</instr>
</include>

<include type="xml" name="decode">
	<instr>
		<type>SQLDecodeElement</type>
		<operand>var:encoded</operand>
		<operator><xpath>/root/a</xpath></operator>
		<target>var:decoded</target>
</instr>
</include>

<include type="xml" name="encoded">
<root>
  <a>
    &amp;lt;a&amp;gt;
    &amp;lt;b&amp;gt;text&amp;lt;/b&amp;gt;
    &amp;lt;/a&amp;gt;
  </a>
</root>
</include>

</includes>
</section>

<section name="copyright" styleuri="/xusr/share/doc/styles_1060/style_footer.xsl"/>	

</document>