<?xml version="1.0" encoding="UTF-8"?>
<document>
<title>httpGet</title>
<!--***************Cascading Style Sheets***************-->
<csslist>
	<css>/xlib/styles/css_ten60_lnf.css</css>
	<css>/xlib/styles/xmlverbatim.css</css>
</csslist>
<!--***************Table of Contents***************-->
<toc>
	<section name="definition"/>
</toc>

<section name="title" styleuri="/xusr/share/doc/styles_1060/style_title.xsl">
	<content>
			<name>httpState</name>
			<text>Data accessor to manage HTTP client state.</text>
	</content>
	<includes>
	</includes>
</section>

<section name="definition" styleuri="/xusr/share/doc/styles_1060/style_basic.xsl">
	<content>
		<h3>Module</h3>
		<b>urn:org:ten60:netkernel:ext:http:client</b>
		<h3>URI</h3>
		<code>active:httpState</code>
		<h3>Purpose</h3>
		<p>
		The HTTP Client accessors <link name="doc_ura_httpGet">httpGet</link>, <link name="doc_ura_httpPost">httpPost</link>
		 <link name="doc_ura_httpPut">httpPut</link> and  <link name="doc_ura_httpDelete">httpDelete</link>
		are services which issue HTTP client requests.  Although HTTP/REST is a stateless protocol there are situations in which
		client-side state is necessary - for example applications which issue session cookies.
		</p>
		<p>
		The <b>httpState</b> data accessor is a service which manages and stores URI addressable HTTP state resources, these are used
		to hold state across different invocations of the http client accessors.
		</p>
		<h4>Cookies</h4>
		<p>
		An HTTP-state resource will store all server-generated cookies.  When a state resource containing cookies is presented to an HTTP client accessor 
		the accessor will use the state to automatically present a stored cookie to the issuing server with each HTTP request.  The HTTP client will automatically
		SINK a new state resource to the httpState accessor if the remote server issues/updates cookies.
		</p>
		<h4>Credentials</h4>
		<p>
		An HTTP-state resource can store access control credentials.  Stored credentials will be automatically used to access an HTTP server
		using simple, digest or NT domain access control protocols - for how to register credentials, see NEW below.
		</p>
		<h3>Usage</h3>
		<h4>NEW</h4>
		<p>
		A NEW request to active:httpState will create a new HTTP state resource and return the URI of the state resource.
		</p>
		<p>Registering Access Control Credentials</p>
		<p>
		An HTTP state resource can hold credentials (username, password) for <i>basic, digest and NT domain</i> HTTP authentication
		protocols.
		</p>
		<p>The basic NEW request will just specify a URI of...
		<code>active:httpState</code>
		</p>
		<p>When issuing a NEW request you can optionally provide a credentials argument...
		<code>active:httpState+credentials@[credentials reference]</code>
		</p>
		<p>When issuing a NEW request you can optionally provide an id to determine the URI of the resulting state resource...
		<code>active:httpState+id@my-id</code>
		</p>
		<p>
		The credentials argument must be an XML document of the following form.
		</p>
		<sub name="creds"/>
		<p>
		Note <i>realm</i> is optional - if not supplied then the username password will be issued with all requests to the given host.  The NTRequestHost and NTDomain
		are only required when the server is using Microsoft's proprietary NTDomain HTTP authenticaiton mechanism.
		</p>
		<p>
		The result of a NEW is the URI to the newly created state resource, such as:
		</p>
		<p>
		<code>active:httpState+id@ABCDABCDACBD123412334</code>
		</p>
		<h4>SOURCE</h4>
		<p>
		A SOURCE request to an active:httpState URI will return the HTTP state resource at the URI.
		</p>
		<p>
		eg SOURCE <code>active:httpState+id@ABCDABCDACBD123412334</code> returns a state resource.
		</p>
		<h4>SINK</h4>
		<p>
		A SINK request to an active:httpState will replace the state resource at the given URI by a
		supplied IAspectHttpState resource.
		</p>
		<p>
		NB This is generally not a user-level operation, it is performed by the HTTP client accessors if the state is changed
		by the remote HTTP request.
		</p>
		<h4>DELETE</h4>
		<p>
		A DELETE request to an active:httpState will delete the state resource.
		</p>
		<p>
		To prevent wasted resources you should can clean up the httpState by deleting any state resources
		when you are finished with them. However unused states are currently discarded after 10 minutes.
		</p>
		<h4>EXISTS</h4>
		<p>
		Tests that the given state resource exists.
		</p>
	</content>
	<includes>
	<include name="creds" type="xml">
	<httpCredentials>
		<realm>optional realm</realm>
		<host>www.somehost.com</host>
		<port>80</port>
		<username>someuser</username>
		<password>somepassword</password>
		<NTRequestHost>NT specific: NT request host</NTRequestHost>
		<NTDomain>NT specific: NT domain</NTDomain>
	</httpCredentials>
	</include>
	</includes>
</section>

<section name="copyright" styleuri="/xusr/share/doc/styles_1060/style_footer.xsl"/>	

</document>