import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.purl.accessor.user.UserResolver;
import org.purl.accessor.domain.DomainResolver;
import org.purl.accessor.util.NKHelper;

main() {

	sb = new StringBuffer("<purl-initialization>");
	
	req = context.createSubRequest("active:purl-storage-initialize");
	context.issueSubRequest(req);
	sb.append("<storage-layer>initialized</storage-layer>");	

	req = context.createSubRequest("active:purl-search-initialize");

	IAspectXDA dataSource  = (IAspectXDA)context.sourceAspect("ffcpl:/etc/ConfigRDBMS.xml", IAspectXDA.class);
    String username =  dataSource.getXDA().getText("/config/rdbms/user", true);
    String password = dataSource.getXDA().getText("/config/rdbms/password", true);
    String jdbc = dataSource.getXDA().getText("/config/rdbms/jdbcConnection", true);

    req.addArgument("username", new StringAspect(username));
    req.addArgument("password", new StringAspect(password));
    req.addArgument("jdbc", new StringAspect(jdbc));

	context.issueSubRequest(req);
	sb.append("<purl-search>initialized</purl-search>");

	if(installAdminUsers()) {
		sb.append("<admin-users>created</admin-users>");
	}
	
	if(createPublicDomains()) {
		sb.append("<public-domains>created</public-domains>");
	}
	
	sb.append("</purl-initialization>");
	resp=context.createResponseFrom(new StringAspect(sb.toString()));
	resp.setMimeType("text/xml");
	context.setResponse(resp);
}

installAdminUsers() {
	userResolver = new UserResolver();
	
	config = context.sourceAspect("ffcpl:/etc/PURLConfig.xml", IAspectXDA.class);
	xdaItor = config.getXDA().readOnlyIterator("/purl-config/adminUsers/user");
	while(xdaItor.hasNext()) {
		xdaItor.next();
		name = xdaItor.getText(xdaItor.getCurrentXPath(), true);
		userURI = userResolver.getURI(name);
		
		req = context.createSubRequest("active:purl-storage-user-exists");
		req.addArgument("uri", userURI);
		req.setAspectClass(IAspectBoolean.class);
		resp = context.issueSubRequestForAspect(req);
		
		if(!resp.isTrue()) {
			sb = new StringBuffer("<user admin=\"true\">");
			sb.append("<id>");
			sb.append(name);
			sb.append("</id>");
			sb.append("<name>User of Steel</name>");
			sb.append("<affiliation>PURL Server</affiliation>");
	        sb.append("<email/>");
	        sb.append("<password>");
	        sb.append(NKHelper.getMD5Value(context, "password"));
	        sb.append("</password>");
	        sb.append("<hint>It is a bad security practice.</hint>");
	        sb.append("<justification/>");
	        sb.append("</user>");
	        
	        sa = new StringAspect(sb.toString());
	        
	        req = context.createSubRequest("active:purl-storage-create-user");
	        req.addArgument("param", sa);
	        res = context.issueSubRequest(req);
	        
	        req=context.createSubRequest("active:purl-storage-approve-user");
			req.addArgument("param", sa);
			res = context.issueSubRequest(req);
		} 
	}
	
	return true;
}

createPublicDomains() {
	domainResolver = new DomainResolver();
	
	config = context.sourceAspect("ffcpl:/etc/PURLConfig.xml", IAspectXDA.class);
	xdaItor = config.getXDA().readOnlyIterator("/purl-config/publicDomains/domain");
	while(xdaItor.hasNext()) {
		xdaItor.next();
		name = xdaItor.getText(xdaItor.getCurrentXPath(), true);
		domainURI = domainResolver.getURI(name);
		
		req = context.createSubRequest("active:purl-storage-domain-exists");
		req.addArgument("uri", domainURI);
		req.setAspectClass(IAspectBoolean.class);
		resp = context.issueSubRequestForAspect(req);
		
		if(!resp.isTrue()) {
			sb = new StringBuffer("<domain>");
			sb.append("<public>true</public>");
	        sb.append("<id>");
	        sb.append(name);
	        sb.append("</id>");
	        sb.append("<name>");
			sb.append("Public Domain " + name );
	        sb.append("</name>");
	        sb.append("<maintainers><uid>admin</uid></maintainers>");
	        sb.append("<writers><uid>admin</uid></writers>");
			sb.append("</domain>");
			
	        sa = new StringAspect(sb.toString());
	        
	        req = context.createSubRequest("active:purl-storage-create-domain");
	        req.addArgument("param", sa);
	        res = context.issueSubRequest(req);

	        req=context.createSubRequest("active:purl-storage-approve-domain");
			req.addArgument("param", sa);
			res = context.issueSubRequest(req);
			
			// TODO: This should be handled by the active:purl-storage-approve-domain
			req=context.createSubRequest("active:cutGoldenThread");
            req.addArgument("param", "gt:resource:" + name);
            context.issueSubRequest(req);
			
		}
	}
	
	return true;
	
}