import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnly;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;
import org.purl.storage.util.StorageHelper;

import java.util.*;

main() {
	resp = null;
	iur = null;
	domain = null;
	
	try {
		param = context.sourceAspect("this:param:param", IAspectXDA.class);
		paramXDA = param.getXDA();
		
		domain = paramXDA.getText("/domain/id", true);
		
		req = context.createSubRequest("active:purl-storage-query-domain");
		// TODO: Refactor DomainResolver into a common module and leverage that
		req.addArgument("uri", "ffcpl:/domain" + domain);
		req.setAspectClass(IAspectXDA.class);
		oldDomainXDA = context.issueSubRequestForAspect(req);

		userMaintainerMap = StorageHelper.generateUserMap(context, paramXDA);
        groupMaintainerMap = StorageHelper.generateGroupMap(context, paramXDA);

        userItor = userMaintainerMap.keySet().iterator();
        groupItor = groupMaintainerMap.keySet().iterator();        
        
        maintainerSB = new StringBuffer("<sed>");
        
        while(userItor.hasNext()) {
            key = userItor.next();
            maintainerSB.append("<pattern><regex>@@USER-");
            maintainerSB.append(key);
            maintainerSB.append("@@</regex><replace>");
            maintainerSB.append(userMaintainerMap.get(key));
            maintainerSB.append("</replace></pattern>");
        }
        
        while(groupItor.hasNext()) {
            key = groupItor.next();
            maintainerSB.append("<pattern><regex>@@GROUP-");
            maintainerSB.append(key);
            maintainerSB.append("@@</regex><replace>");
            maintainerSB.append(groupMaintainerMap.get(key));
            maintainerSB.append("</replace></pattern>");
        }        
        
        maintainerSB.append("<pattern><regex>@@DID@@</regex><replace>");
        maintainerSB.append(oldDomainXDA.getXDA().getText("/domain/z_id", true));
        maintainerSB.append("</replace></pattern>");
        maintainerSB.append("</sed>");
			
		req = context.createSubRequest("active:xslt");
		req.addArgument("operand", param);
		req.addArgument("operator", "ffcpl:/sql/db/updateDomain.xsl");
		iur = context.issueSubRequest(req);
		
        req = context.createSubRequest();
        req.setURI("active:sed");
        req.addArgument("operator", new StringAspect(maintainerSB.toString()));
        req.addArgument("operand", iur);
        iur = context.issueSubRequest(req);
        
       	req = context.createSubRequest("active:sqlBatch");
        req.addArgument("operand", iur);
        iur = context.issueSubRequest(req);
        
		req=context.createSubRequest("active:cutGoldenThread");
		req.addArgument("param", "gt:resource:" + domain);
		context.issueSubRequest(req);
		
		req = context.createSubRequest("active:purl-storage-query-domain");
		// TODO: Refactor DomainResolver into a common module and leverage that
		req.addArgument("uri", "ffcpl:/domain" + domain);
		iur = context.issueSubRequest(req);
	} catch(Throwable t) {
		t.printStackTrace();
		iur = new StringAspect("<error message=\"Could not update domain:" + domain + "\"/>");
	}
	
	resp = context.createResponseFrom(iur);
	resp.setMimeType("text/xml");
	context.setResponse(resp);
}