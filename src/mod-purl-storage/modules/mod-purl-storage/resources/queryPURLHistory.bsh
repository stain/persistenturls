import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import com.ten60.netkernel.urii.aspect.StringAspect;

import java.util.*;

import org.ten60.netkernel.layer1.nkf.INKFConvenienceHelper;
import org.ten60.netkernel.layer1.nkf.INKFRequest;
import org.ten60.netkernel.layer1.nkf.INKFRequestReadOnly;
import org.ten60.netkernel.layer1.nkf.INKFResponse;
import org.ten60.netkernel.layer1.nkf.impl.NKFAccessorImpl;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;

main() {
	purl=context.getThisRequest().getArgument("purl");
	req = context.createSubRequest("active:purl-storage-query-purl");
	purl = purl.startsWith("ffcpl:/purl") ? purl : "ffcpl:/purl" + purl;
	req.addArgument("uri", purl);
	req.setAspectClass(IAspectXDA.class);
	res = context.issueSubRequestForAspect(req);
	
	maintainerMap = new HashMap();
    maintainerItor = res.getXDA().readOnlyIterator("/purl/maintainers/uid");
    while(maintainerItor.hasNext()) {
       maintainerItor.next();
       maintainer = maintainerItor.getText(".", true);
       z_id = maintainerMap.get(maintainer);
            
       if(z_id == null) {
           req = context.createSubRequest("active:purl-storage-query-user");
           req.addArgument("uri", "ffcpl:/user/" + maintainer);
           req.setAspectClass(IAspectXDA.class);
           maintainerXDA = (IAspectXDA)context.issueSubRequestForAspect(req);
           z_id = maintainerXDA.getXDA().getText("/user/z_id", true);
           maintainerMap.put(maintainer, z_id);
       }
    }
        
    itor = maintainerMap.keySet().iterator();
        
    maintainerSB = new StringBuffer("<sed>");
        
    while(itor.hasNext()) {
       key = itor.next();
       maintainerSB.append("<pattern><regex>@@MAINTAINER-");
       maintainerSB.append(maintainerMap.get(key));
       maintainerSB.append("@@</regex><replace>");
       maintainerSB.append(key);
       maintainerSB.append("</replace></pattern>");
    }
        
    maintainerSB.append("<pattern><regex>@@PID@@</regex><replace>");
    maintainerSB.append(purl.substring(11));
    maintainerSB.append("</replace></pattern>");
    maintainerSB.append("</sed>");
    
	req=context.createSubRequest("active:dpml");
	req.addArgument("operand", "ffcpl:/sql/db/queryPURLHistory.idoc");
	req.addArgument("param", res);
	req.addArgument("nocache", new StringAspect("no-cache"));	
	res = context.issueSubRequest(req);
	
	req=context.createSubRequest("active:xslt");
	req.addArgument("operand", res);
	req.addArgument("operator", "ffcpl:/resources/purlhistory.xsl");
	res = context.issueSubRequest(req);
	
    req = context.createSubRequest();
    req.setURI("active:sed");
    req.addArgument("operator", new StringAspect(maintainerSB.toString()));
    req.addArgument("operand", res);
    res = context.issueSubRequest(req);
	
  	response = context.createResponseFrom(res);
  	response.setMimeType("text/xml");
  	context.setResponse(response);
}