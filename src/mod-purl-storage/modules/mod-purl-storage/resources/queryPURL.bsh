import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;
import org.ten60.netkernel.xml.representation.IAspectXDA;
import org.ten60.netkernel.xml.xda.IXDAReadOnly;
import org.ten60.netkernel.xml.xda.IXDAReadOnlyIterator;
import org.apache.commons.lang.StringEscapeUtils;

import java.util.*;

main() {
    resp = null;
    iur = null;
    purl = null;
    
    try {
	
        ruri = context.getThisRequest().getArgument("uri");
        purl = ruri.substring(11);
		purl = StringEscapeUtils.escapeXml(purl);

        purlSQL = context.sourceAspect("ffcpl:/sql/db/purlQuery.xml", IAspectXDA.class);
        purlSQL = generatePURLQuerySQL(purlSQL, purl);
        results = issueSQLQuery(purlSQL);

        if(results.getXDA().isTrue("/results/row/z_id")) {
        purlID = results.getXDA().getText("/results/row/z_id/text()", true);

        purlMaintainersSQL = context.sourceAspect("ffcpl:/sql/db/purlMaintainersQuery.xml", IAspectXDA.class);
        purlMaintainersResults = issueSQLQuery(processSQL(purlMaintainersSQL, purlID));
        
        purlTemplate = context.sourceAspect("ffcpl:/resources/purlTemplate.xml", IAspectXDA.class);     
        resultsXDA = results.getXDA();
        purlXDA = purlTemplate.getClonedXDA();
        purlXDA.setText("/purl/z_id", resultsXDA.getText("/results/row/z_id/text()", true));                
        purlXDA.setText("/purl/id", resultsXDA.getText("/results/row/p_id/text()", true));
        purlXDA.setText("/purl/@status", resultsXDA.getText("/results/row/status/text()", true));
        
        type = resultsXDA.getText("/results/row/type/text()", true);
        
        purlXDA.setText("/purl/type", type);
        
        if ("301".equals(type)
            || "302".equals(type)
            || "307".equals(type)
            || type.startsWith("partial")
            || "chain".equals(type)) {
            purlXDA.appendPath("/purl", "target/url", resultsXDA.getText("/results/row/target/text()", true));
        } else if ("303".equals(type)) {
            purlXDA.appendPath("/purl", "seealso/url", resultsXDA.getText("/results/row/target/text()", true));            
        }
        
        itor = purlMaintainersResults.getXDA().readOnlyIterator("/results/row");
        addPURLMaintainers(purlXDA, itor);

        iur = new DOMXDAAspect(purlXDA);
        } else {
            iur = new StringAspect("<purl/>");
        }

    } catch(Throwable t) {
        iur = new StringAspect("<error message=\"Could not query purl:" + purl + "\"/>");
    }

    req=context.createSubRequest("active:attachGoldenThread");
    req.addArgument("operand", iur);
    req.addArgument("param", "gt:resource:" + purl);
    res=context.issueSubRequest(req);
        
    resp = context.createResponseFrom(res);
    resp.setMimeType("text/xml");
    resp.setCacheable();
    context.setResponse(resp);
}

generatePURLQuerySQL(purlSQL, purl) {
    // Sed the PURL name
    // TODO: Turn this into a cacheable resource request
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@PID@@</regex><replace>");
	purl = StringEscapeUtils.escapeXml(purl);
    sedSB.append(purl);
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", purlSQL);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);
}

issueSQLQuery(sql) {
    // Issue the query and return the results as IAspectXDA
    req = context.createSubRequest("active:sqlQuery");
    req.addArgument("operand", sql);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);
}

processSQL(purlMaintainersSQL, purlID) {
    // Sed the database and table names
    // TODO: Turn these into cacheable resource requests
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@PID@@</regex><replace>");
    sedSB.append(purlID);
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", purlMaintainersSQL);
    req.setAspectClass(IAspectXDA.class);
    context.issueSubRequestForAspect(req);
}

addPURLMaintainers(xda, itor) {
    while(itor.hasNext()) {
        itor.next();
        sb = new StringBuffer();
            
        switch(itor.getText("type", true)) {
            case "0":
                sb.append("<uid>");
                sb.append(getMaintainerFromID("userid", "users", itor.getText("m_id", true)));
                sb.append("</uid>");
            break;
            case "1":
                sb.append("<gid>");
                sb.append(getMaintainerFromID("g_id", "groups", itor.getText("m_id", true)));              
                sb.append("</gid>"); 
            break;
        }
        node = context.transrept(new StringAspect(sb.toString()), IAspectXDA.class);
        xda.append(node.getXDA(), "/", "/purl/maintainers");
    }
}

getMaintainerFromID(maintainerLabel, maintainerTable, zID) {

    maintainerFromIDSQL = context.source("ffcpl:/sql/db/queryMaintainerFromID.xml");
    
    sedSB = new StringBuffer("<sed><pattern><regex>@@ZID@@</regex><replace>");
    sedSB.append(zID);
    sedSB.append("</replace></pattern><pattern><regex>@@TABLE_NAME@@</regex><replace>");
    sedSB.append(maintainerTable);
    sedSB.append("</replace></pattern><pattern><regex>@@MAINTAINER_LABEL@@</regex><replace>");
    sedSB.append(maintainerLabel);  
    sedSB.append("</replace></pattern></sed>");
    sed = new StringAspect(sedSB.toString());
    
    req = context.createSubRequest("active:sed");
    req.addArgument("operator", sed);
    req.addArgument("operand", maintainerFromIDSQL);
    req.setAspectClass(IAspectXDA.class);
    maintainerFromIDSQL = context.issueSubRequestForAspect(req);
    
    results = issueSQLQuery(maintainerFromIDSQL);

    maintainer = results.getXDA().getText("/results/row/" + maintainerLabel, true);
}