@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix purl:<http://persistent.name/rdf/2010/purl#>.

# Called from user edit page
purl:get-confirm-email rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:operation "confirm-email";
	http:type "text/html";
	http:cache-control "no-store";
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <confirm-email.xml>;
	obj:groovy """
		return confirmEmailXml.calliConstruct('view', this)
	""".

# Sends an email to confirm email address
purl:post-confirm-email rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:method "POST";
	http:operation "confirm-email";
	http:type "text/html";
	http:cache-control "no-store";
	obj:imports </mail.properties>;
	obj:imports <mail-confirmation.xml>;
	obj:imports <confirmation-sent.xml>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:groovy """
		String email = msg.form.get('email')[0]
		if (!email || email.indexOf('@') < 1)
			throw new BadRequest("Invalid Email Address")
		String ha1 = DigestUtils.md5Hex(purlEmail)
		String nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt())
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		String token = DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}")
		String qs = "?change-email&amp;email=${email}&amp;nonce=${nonce}&amp;token=${token}"
		Reader reader = mailConfirmationXml.calliConstruct('pre-view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			String body = writer.toString()
			body = (body =~ /"\\?change-email"/).replaceAll("${toUri()}?change-email")
			body = (body =~ /\\?change-email/).replaceAll(qs)
			mailProperties.purlSendMail(email, body, null)
		} finally {
			reader.close()
		}
		return confirmationSentXml.calliConstruct('view', null)
	""".

purl:post-confirm-email-form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-confirm-email;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded";
	obj:name "form".

# Linked from confirmation email
purl:get-change-email rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:operation "change-email";
	http:type "text/html";
	http:cache-control "no-store";
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <change-email.xml>;
	obj:groovy """
		return changeEmailXml.calliConstruct('view', this)
	""".

# Changes a user's email address
# Submitted after user has confirmed email address
purl:post-change-email rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom purl:User];
	http:method "POST";
	http:operation "change-email";
	http:type "text/html";
	http:cache-control "no-store";
	http:expect "303-see-other";
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:groovy """
		String email = msg.form.get('email')[0]
		if (!email || email.indexOf('@') < 1)
			throw new BadRequest("Invalid Email Address")
		String nonce = msg.form.get('nonce')[0]
		String token = msg.form.get('token')[0]
		String ha1 = DigestUtils.md5Hex(purlEmail)
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		if (token != DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}"))
			throw new BadRequest("Request is No Longer Valid")
		purlEmail = email
		return this
	""".

purl:post-change-email-form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-change-email;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded";
	obj:name "form".

