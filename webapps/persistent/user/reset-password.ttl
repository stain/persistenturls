@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix purl:<http://persistent.name/rdf/2010/purl#>.

# Sends an email confirmation to reset their password
# Called from forgot password form or user edit page
purl:request-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <mail-request-password.xml>;
	obj:groovy """
		String ha1 = DigestUtils.md5Hex(calliEncoded)
		String nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt())
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		String token = DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}")
		String qs = "?reset-password&amp;nonce=${nonce}&amp;token=${token}"
		Reader reader = mailRequestPasswordXml.calliConstruct('view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			String body = writer.toString()
			body = (body =~ /"\\?reset-password"/).replaceAll("${toUri()}?reset-password")
			body = (body =~ /\\?reset-password/).replaceAll(qs)
			sendMessage(body, calliEmail)
		} finally {
			reader.close()
		}
	""".

# Linked from request password email
purl:get-reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:operation "reset-password";
	http:type "text/html";
	http:cache-control "no-store";
	http:realm <../anybody>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <reset-password.xml>;
	obj:groovy """
		return resetPasswordXml.calliConstruct('view', this)
	""".

# Confirms token and resets their password
purl:post-reset-password-token rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:method "POST";
	http:operation "reset-password-token";
	http:type "text/html";
	http:cache-control "no-store";
	http:realm <../anybody>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <password-sent.xml>;
	obj:groovy """
		if (!msg.form.get('nonce') || !msg.form.get("token"))
			throw new BadRequest("Missing nonce and/or token")
		String ha1 = DigestUtils.md5Hex(calliEncoded)
		String nonce = msg.form.get('nonce')[0]
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		String token = DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}")
		if (token != msg.form.get("token")[0])
			throw new BadRequest("Request is No Longer Valid")
		purlResetPassword()
		return passwordSentXml.calliConstruct('view', null)
	""".

purl:post-reset-password-form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-reset-password-token;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded";
	obj:name "form".

# Confirms token and resets their password
purl:post-reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:method "POST";
	http:operation "reset-password";
	http:type "text/html";
	http:cache-control "no-store";
	obj:imports <password-sent.xml>;
	obj:groovy """
		purlResetPassword()
		return passwordSentXml.calliConstruct('view', null)
	""".

# Creates a new password and sends it to the user in an email
# Called on registration, forgot password form, or user edit page
purl:reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:imports <../authority>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:nl.captcha.Captcha>;
	obj:imports <java:nl.captcha.text.producer.DefaultTextProducer>;
	obj:imports <java:javax.imageio.ImageIO>;
	obj:imports <mail-password.xml>;
	obj:groovy """
		Captcha captcha = new Captcha.Builder(200, 50)
			.addText(new DefaultTextProducer(8)).addNoise().gimp().build()
		String token = "${calliName}:${authority.calliAuthName}:${captcha.answer}"
		calliAlgorithm = "MD5"
		calliEncoded = DigestUtils.md5(token.getBytes("UTF-8"))
		ByteArrayOutputStream image = new ByteArrayOutputStream()
		ImageIO.write(captcha.image, "png", image)
		ByteArrayInputStream png = new ByteArrayInputStream(image.toByteArray())
		Reader reader = mailPasswordXml.calliConstruct('view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			String body = writer.toString()
			sendMessage(body, png, "image/png", calliEmail)
		} finally {
			reader.close()
		}
	""".

