@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix purl:<http://persistent.name/rdf/2010/purl#>.

<anybody> a calli:AnybodyRealm.

<local> a calli:LocalRealm.

calli:SPARQLService http:realm <local>.
calli:describe http:realm <local>.
calli:get-graph http:realm <local>.

<authority> a calli:DigestRealm;
	calli:origin </>;
	calli:authName </>;
	calli:domain </>.

purl:User rdfs:subClassOf calli:Credential;
	http:realm <authority>.

purl:email a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:User;
	rdfs:range xsd:string.

rdfs:label a owl:DatatypeProperty;
	rdfs:range xsd:string;
	http:operation "label";
	http:type "text/plain;q=0.9";
	http:rel "alternate".

calli:get-copy http:realm <authority>.
calli:pre-copy http:realm <authority>.
calli:post-copy http:realm <authority>.
calli:get-edit http:realm <authority>.
calli:pre-edit http:realm <authority>.
calli:post-edit http:realm <authority>.
calli:get-delete http:realm <authority>.
calli:pre-delete http:realm <authority>.
calli:post-delete http:realm <authority>.

purl:purl-authorize owl:equivalentClass calli:authorize-credential;
	obj:sparql """
		ASK {
			$subject a purl:PURL; purl:partOf ?partial
			{
				?partial calli:curator $credential
			} UNION {
				?partial calli:maintainer $credential
			} UNION {
				?partial purl:belongsTo [calli:curator $credential]
			} UNION {
				?partial purl:belongsTo [calli:maintainer $credential]
			}
		}
	""".

purl:partial-authorize owl:equivalentClass calli:authorize-credential;
	obj:sparql """
		ASK {
			$subject a purl:Partial; purl:belongsTo ?domain
			{
				?domain calli:curator $credential
			} UNION {
				?domain calli:maintainer $credential
			}
		}
	""".

purl:login-authorize owl:equivalentClass calli:authorize-credential;
	obj:sparql """
		ASK {
			$subject calli:credential $credential
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($qs = "login")
		}
	""".

purl:logout rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:operation "logout";
	http:cache-control "private";
	http:type "message/x-response";
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:groovy """
		def ver = new ProtocolVersion("HTTP", 1, 1)
		def resp = new BasicHttpResponse(ver, 303, "See Other")
		def credential = findCredential(msg.authorization)
		if (credential == null) {
			resp.setHeader("Location", toString() + "?login")
			return resp
		}
		if (msg.user != null && msg.user == credential)
			return unauthorized()
		if (msg.user == null) {
			resp.setHeader("Location", toString() + "?logout&from=" + credential.toString())
		} else {
			resp.setHeader("Location", credential.toString())
		}
		return resp
	""".

purl:logout-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:logout;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

purl:logout-user a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:logout;
	rdfs:range calli:Credential;
	http:parameter "from";
	http:type "text/uri-list";
	obj:name "user".

purl:login rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom calli:Credential];
	http:operation "login";
	http:realm <authority>;
	http:expect "303-see-other";
	obj:groovy "return findCredential(msg.authorization)".

purl:login-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:login;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

purl:credential rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom calli:Credential];
	http:operation "credential";
	http:cache-control "private";
	http:expect "303-see-other";
	obj:groovy "return findCredential(msg.authorization)".

purl:credential-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:credential;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

purl:unauthorized rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:type "message/http";
	http:operation "unauthorized";
	http:cache-control "no-store";
	obj:name "unauthorized";
	obj:imports <unauthorized.xml>;
	obj:imports <java:org.apache.http.entity.StringEntity>;
	obj:groovy """
		Reader reader = unauthorizedXml.calliConstruct('view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			def resp = msg.functionalObjectResponse
			if (resp.entity) {
				resp.entity.consumeContent()
			}
			resp.entity = new StringEntity(writer.toString(), "UTF-8")
			resp.setHeader("Content-Type", "text/html;charset=\\"UTF-8\\"")
			return resp
		} finally {
			reader.close()
		}
	""".

purl:forbidden rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:type "message/http";
	http:operation "forbidden";
	http:cache-control "no-store";
	obj:name "forbidden";
	obj:imports <forbidden.xml>;
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:imports <java:org.apache.http.entity.StringEntity>;
	obj:groovy """
		Reader reader = forbiddenXml.calliConstruct('view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			def ver = new ProtocolVersion("HTTP", 1, 1)
			def resp = new BasicHttpResponse(ver, 403, "Forbidden")
			resp.entity = new StringEntity(writer.toString(), "UTF-8")
			resp.setHeader("Content-Type", "text/html;charset=\\"UTF-8\\"")
			return resp
		} finally {
			reader.close()
		}
	""".

purl:post-request-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:method "POST";
	http:operation "request-password";
	http:type "text/html";
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <user/request-password-sent.xml>;
	obj:imports purl:User;
	obj:groovy """
		if (!msg.form || !msg.form.get("email") || !msg.form.get("email")[0])
			throw new BadRequest("Missing Email")
		for (User user : purlFindUsersByEmail(msg.form.get("email")[0])) {
			user.purlRequestPassword()
		}
		return requestPasswordSentXml.calliConstruct('view', null)
	""".

purl:post-request-password-email a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-request-password;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded";
	obj:name "form".

purl:find-users-by-email rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:DigestRealm];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom purl:User];
	obj:sparql """
		SELECT REDUCED ?user
		WHERE {
			{
				$this calli:credential [calli:member ?user]
			} UNION {
				$this calli:credential ?user
			}
			?user purl:email $email
		}
	""".

purl:find-users-by-email-arg a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain purl:find-users-by-email;
	rdfs:range xsd:string;
	obj:name "email".

purl:request-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <user/mail-request-password.xml>;
	obj:imports </mail.properties>;
	obj:groovy """
		String ha1 = DigestUtils.md5Hex(calliEncoded)
		String nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt())
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		String token = DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}")
		String qs = "?reset-password&amp;nonce=${nonce}&amp;token=${token}"
		Reader reader = mailRequestPasswordXml.calliConstruct('pre-view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			String body = writer.toString()
			body = (body =~ /"\\?reset-password"/).replaceAll("${toUri()}?reset-password")
			body = (body =~ /\\?reset-password/).replaceAll(qs)
			mailProperties.purlSendMail(purlEmail, body, null)
		} finally {
			reader.close()
		}
	""".

purl:get-reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:operation "reset-password";
	http:type "text/html";
	http:cache-control "no-store";
	http:realm <anybody>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <user/reset-password.xml>;
	obj:groovy """
		return resetPasswordXml.calliConstruct('view', this)
	""".

purl:post-reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.Reader>];
	http:Method "POST";
	http:operation "reset-password";
	http:type "text/html";
	http:cache-control "no-store";
	http:realm <anybody>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <user/password-sent.xml>;
	obj:groovy """
		if (!msg.form.get('nonce') || !msg.form.get("token"))
			throw new BadRequest("Missing nonce and/or token")
		String ha1 = DigestUtils.md5Hex(calliEncoded)
		String nonce = msg.form.get('nonce')[0]
		String ha2 = DigestUtils.md5Hex(toUri().toString())
		String token = DigestUtils.md5Hex("${ha1}:${nonce}:${ha2}")
		if (token != msg.form.get("token")[0])
			throw new BadRequest("Request is No Longer Valid")
		purlResetPassword()
		return passwordSentXml.calliConstruct('view', null)
	""".

purl:post-reset-password-form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-reset-password;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded";
	obj:name "form".

purl:reset-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:imports </mail.properties>;
	obj:imports <authority>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <java:nl.captcha.Captcha>;
	obj:imports <java:nl.captcha.text.producer.DefaultTextProducer>;
	obj:imports <java:javax.imageio.ImageIO>;
	obj:imports <user/mail-password.xml>;
	obj:groovy """
		Captcha captcha = new Captcha.Builder(200, 50)
			.addText(new DefaultTextProducer(8)).addNoise().gimp().build()
		String token = "${calliName}:${authority.calliAuthName}:${captcha.answer}"
		calliAlgorithm = "MD5"
		calliEncoded = DigestUtils.md5(token.getBytes("UTF-8"))
		ByteArrayOutputStream image = new ByteArrayOutputStream()
		ImageIO.write(captcha.image, "png", image)
		ByteArrayInputStream png = new ByteArrayInputStream(image.toByteArray())
		Reader reader = mailPasswordXml.calliConstruct('pre-view', this)
		try {
			CharArrayWriter writer = new CharArrayWriter()
			int read
			char[] cbuf = new char[1024]
			while ((read = reader.read(cbuf)) >= 0) {
				writer.write(cbuf, 0, read)
			}
			String body = writer.toString()
			mailProperties.purlSendMail(purlEmail, body, png)
		} finally {
			reader.close()
		}
	""".

purl:remove-password rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:User];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:groovy """
		calliAlgorithm = null
		calliEncoded = null
	""".

