@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix purl:<http://persistent.name/rdf/2010/purl#>.

</callimachus/menu>
	calli:item [calli:position 6; rdfs:label "Persistent URLs"; calli:link <../persistenturls>].

################################
# Server
################################

<../persistenturls> a purl:Server;
	calli:maintainer </group/admin>.

purl:Server rdfs:subClassOf calli:Viewable, calli:Reviewable, calli:Editable;
	calli:view <server/view.xml>;
	calli:review <server/review.xml>;
	calli:edit <server/edit.xml>.

################################
# Mirror
################################

<mirror/template> a purl:MirrorTemplate;
	calli:scribe </group/admin>.

purl:MirrorTemplate rdfs:subClassOf calli:Copyable;
	calli:withNamespace "http://";
	calli:copy <mirror/create-top.xml>.

# Sets up the purl:domainOf property
# Called when copying a domain
purl:post-mirror-copy owl:intersectionOf (</callimachus/operations/copy.ttl#PostCopy>
		[owl:onProperty obj:target; owl:allValuesFrom purl:MirrorTemplate]);
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:script """
		var copy = proceed();
		if (!copy.purlDefinedBy)
			throw new BadRequest("Missing Defined By Mirror Source");
		return copy;
	""".

purl:get-mirror-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:operation "mirror-create";
	http:type "text/html";
	http:realm </accounts>;
	obj:imports <mirror/create.xml>;
	obj:script """
		return create_xml.calliConstructHTML(this, 'copy');
	""".

# Sets up purl:domainOf, purl:partOf, and increments the parent timestamp
# Called when creating a sub mirror
purl:post-mirror-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:method "POST";
	http:operation "mirror-create";
	http:realm </accounts>;
	http:expect "201-created";
	http:type "text/uri-list";
	obj:imports <mirror/create.xml>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:script """
		var copy = create_xml.calliCopyResource(this, input, java.util.Collections.singleton(this));
		if (!copy.purlDefinedBy)
			throw new BadRequest("Missing Defined By Mirror Source");
		if (this.purlBelongsTo) {
			copy.purlDomainOf.addAll(this.purlBelongsTo.purlDomainOf);
		} else {
			copy.purlDomainOf.addAll(this.purlDomainOf);
			copy.purlDomainOf.add(this);
		}
		copy.purlPartOf = this;
		this.touchRevision();
		return copy;
	""".

purl:post-mirror-create-input a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-mirror-create;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml";
	obj:name "input".

purl:MirroredDomain rdfs:subClassOf calli:Viewable;
	calli:view <mirror/view.xml>;
	calli:review <domain/review.xml>;
	calli:edit <forbidden.xml>.

################################
# Domain
################################

<domain/template> a purl:DomainTemplate;
	calli:withNamespace "http://";
	calli:curator </group/admin>.

purl:DomainTemplate rdfs:subClassOf calli:Copyable;
	calli:copy <domain/create-top.xml>.

purl:get-domain-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:operation "domain-create";
	http:type "text/html";
	http:realm </accounts>;
	obj:imports <domain/create.xml>;
	obj:script """
		return create_xml.calliConstructHTML(this, 'copy');
	""".

# Sets up purl:domainOf, purl:partOf, and increments the parent timestamp
# Called when creating a sub domain
purl:post-domain-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:method "POST";
	http:operation "domain-create";
	http:realm </accounts>;
	http:expect "201-created";
	http:type "text/uri-list";
	obj:imports <domain/create.xml>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:script """
		var copy = create_xml.calliCopyResource(this, input, java.util.Collections.singleton(this));
		if (copy.calliMaintainers.empty)
			throw new BadRequest("Missing Maintainers");
		if (this.purlBelongsTo) {
			copy.purlDomainOf.addAll(this.purlBelongsTo.purlDomainOf);
		} else {
			copy.purlDomainOf.addAll(this.purlDomainOf);
			copy.purlDomainOf.add(this);
		}
		copy.purlPartOf = this;
		this.touchRevision();
		return copy;
	""".

purl:post-domain-create-input a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-domain-create;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml";
	obj:name "input".

purl:Domain rdfs:subClassOf calli:Viewable, calli:Reviewable, calli:Editable;
	calli:view <domain/view.xml>;
	calli:review <domain/review.xml>;
	calli:edit <domain/edit.xml>.

# Sets up the purl:domainOf property
# Called when copying a domain
purl:post-domain-copy owl:intersectionOf (</callimachus/operations/copy.ttl#PostCopy>
		[owl:onProperty obj:target; owl:allValuesFrom purl:Domain]);
	obj:script """
		var copy = proceed();
		copy.purlDomainOf.addAll(this.purlDomainOf);
		return copy;
	""".

################################
# Partial
################################

purl:get-partial-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:operation "partial-create";
	http:realm </accounts>;
	http:type "text/html";
	obj:imports <partial/create.xml>;
	obj:script """
		return create_xml.calliConstructHTML(this, 'copy');
	""".

# Sets up purl:partOf and purl:belongsTo properties
# Called when creating a partial PURL
purl:post-partial-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:method "POST";
	http:operation "partial-create";
	http:realm </accounts>;
	http:expect "201-created";
	http:type "text/uri-list";
	obj:imports <partial/create.xml>;
	obj:script """
		var copy = create_xml.calliCopyResource(this, input, java.util.Collections.singleton(this));
		copy.purlPartOf = this;
		copy.purlBelongsTo = this.purlBelongsTo ? this.purlBelongsTo : this;
		this.touchRevision();
		return copy;
	""".

purl:post-partial-create-input a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-partial-create;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml";
	obj:name "input".

purl:Partial rdfs:subClassOf calli:Viewable, calli:Reviewable, calli:Editable, calli:Copyable;
	calli:view <partial/view.xml>;
	calli:review <partial/review.xml>;
	calli:edit <partial/edit.xml>;
	calli:copy <partial/copy.xml>.

# Sets up purl:belongsTo properties
# Called when copying a partial PURL
purl:post-partial-copy owl:intersectionOf (</callimachus/operations/copy.ttl#PostCopy>
		[owl:onProperty obj:target; owl:allValuesFrom purl:Partial]);
	obj:script """
		var copy = proceed();
		copy.purlBelongsTo = this.purlBelongsTo;
		return copy;
	""".

################################
# PURL
################################

purl:get-purl-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:operation "purl-create";
	http:realm </accounts>;
	http:type "text/html";
	obj:imports <purl/create.xml>;
	obj:script """
		return create_xml.calliConstructHTML(this, 'copy');
	""".

# Sets up the purl:partOf property and incements the parent's timestamp
# Called when creating a PURL
purl:post-purl-create rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:Partial];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:method "POST";
	http:operation "purl-create";
	http:realm </accounts>;
	http:expect "201-created";
	http:type "text/uri-list";
	obj:imports <purl/create.xml>;
	obj:script """
		var copy = create_xml.calliCopyResource(this, input, java.util.Collections.singleton(this));
		copy.purlPartOf = this;
		this.touchRevision();
		return copy;
	""".

purl:post-purl-create-input a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-purl-create;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml";
	obj:name "input".

purl:PURL rdfs:subClassOf calli:Viewable, calli:Reviewable, calli:Editable, calli:Copyable;
	calli:view <purl/view.xml>;
	calli:review <purl/review.xml>;
	calli:edit <purl/edit.xml>;
	calli:copy <purl/copy.xml>.

# Ensures any PURL copied has the same parent
# Called when copying a PURL
purl:find-purl-prefix owl:intersectionOf ( </callimachus/operations/copy.ttl#FindCopyNamespaces>
		[owl:onProperty obj:target; owl:allValuesFrom purl:PURL]);
	rdfs:comment "On purl copy, the result must start with the same domain";
	obj:script "return java.util.Collections.singleton(this.purlPartOf);".

# Sets up purl:partOf property
# Called when copying a PURL
purl:post-purl-copy owl:intersectionOf (</callimachus/operations/copy.ttl#PostCopy>
		[owl:onProperty obj:target; owl:allValuesFrom purl:PURL]);
	obj:script """
		var copy = proceed();
		copy.purlPartOf = this.purlPartOf;
		if (this.purlPartOf) {
			this.purlPartOf.touchRevision();
		}
		return copy;
	""".

# Updates the parent's timestamp
# Called when editing a PURL or Domain
purl:post-purl-edit owl:intersectionOf (</callimachus/operations/edit.ttl#PostEdit>
		[owl:onProperty obj:target; owl:allValuesFrom purl:PURL]);
	obj:script """
		if (this.purlPartOf) {
			this.purlPartOf.touchRevision();
		}
		return proceed();
	""".

# Marks a PURL as disabled
# Called from the PURL edit page
purl:purl-disable rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:PURL];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:method "POST";
	http:operation "purl-disable";
	http:realm </accounts>;
	http:type "message/x-response";
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:imports purl:Disabled;
	obj:script """
		objectConnection.addDesignation(this, Disabled);
		var ver = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(ver, 204, "No Content");
		resp.addHeader("Location", this + "?view");
		if (this.purlPartOf) {
			this.purlPartOf.touchRevision();
		}
		return resp;
	""".

# Enables a disabled PURL
# Called from the PURL edit page
purl:purl-enable rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:PURL];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:method "POST";
	http:operation "purl-enable";
	http:realm </accounts>;
	http:type "message/x-response";
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:imports purl:Disabled;
	obj:script """
		objectConnection.removeDesignation(this, Disabled);
		var ver = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(ver, 204, "No Content");
		resp.addHeader("Location", this + "?view");
		if (this.purlPartOf) {
			this.purlPartOf.touchRevision();
		}
		return resp;
	""".

# Marks a PURL as tombstoned
# Called from a PURL edit page
purl:purl-tombstone rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:PURL];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:method "POST";
	http:operation "purl-tombstone";
	http:realm </accounts>;
	http:type "message/x-response";
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:imports purl:Tombstoned;
	obj:imports purl:Disabled;
	obj:script """
		objectConnection.removeDesignation(this, Disabled);
		objectConnection.addDesignation(this, Tombstoned);
		var ver = new ProtocolVersion("HTTP", 1, 1)
		var resp = new BasicHttpResponse(ver, 204, "No Content");
		resp.addHeader("Location", this + "?view")
		if (this.purlPartOf) {
			this.purlPartOf.touchRevision();
		}
		return resp;
	""".

